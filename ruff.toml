# Ruff configuration file
# See: https://docs.astral.sh/ruff/configuration/

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4",   # pycodestyle errors
    "E7",   # pycodestyle errors
    "E9",   # pycodestyle errors
    "F",    # pyflakes
    "W",    # pycodestyle warnings
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "Q",    # flake8-quotes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "S",    # flake8-bandit
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C90",  # mccabe
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "T20",  # flake8-print
    "PIE",  # flake8-pie
    "TCH",  # flake8-type-checking
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # numpy
    "AIR",  # airflow
    "PERF", # perflint
    "FURB", # refurb
    "RUF",  # ruff-specific rules
    "ANN",  # flake8-annotations (type hints)
    "FA",   # flake8-future-annotations
]

ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901",
    # Allow print statements
    "T201",
    # Allow relative imports
    "TID252",
    # Allow unused arguments in __init__ methods
    "ARG002",
    # Allow unused variables that start with underscore
    "F841",
    # Allow long lines in docstrings
    "D200", "D202", "D213", "D214", "D215",
    # Disable trailing comma rule to avoid conflicts with formatter
    "COM812",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "D100", "D101", "D102", "D103", "D104", "ANN"]
# Allow print statements in main.py
"main.py" = ["T201"]
# Allow some flexibility in __init__.py files
"**/__init__.py" = ["D104"]

[lint.isort]
known-first-party = ["models", "util"]

[lint.pydocstyle]
convention = "google"

[lint.mccabe]
max-complexity = 10

[lint.pylint]
max-args = 5
max-branches = 12
max-returns = 6
max-statements = 50

[lint.flake8-annotations]
# Enforce type hints on all functions and methods
ignore-fully-untyped = false
# Allow some flexibility for complex cases
allow-star-arg-any = true
# Suppress dummy args (like self, cls)
suppress-dummy-args = true
# Suppress None returning functions
suppress-none-returning = false

# Future annotations enforcement is handled by FA rules in select list
